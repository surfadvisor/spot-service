# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
swagger: "2.0"
info:
  title: 'spots'
  version: 0.0.1

paths:
  /spots:
    get:
      tags:
        - "spot"
      summary: "Find spots using selectors"
      operationId: "findSpots"
      produces:
        - "application/xml"
        - "application/json"
      consumes:
        - "application/xml"
        - "application/json"
      parameters:

        - in: query
          name: limit
          required: true
          default: 100
          description: "page size"
          type: integer

        - in: query
          name: lastKey
          required: false
          description: "last evaluated key received from previous dynamoDB query"
          type: string

        - in: body
          name: filters
          required: true
          description: "spot query filters"
          schema:
            $ref: '#/definitions/SpotFilters'
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/PagedSpotResponse"

    put:
      tags:
        - "spot"
      summary: "put spot"
      operationId: "putSpot"
      produces:
        - "application/xml"
        - "application/json"
      consumes:
        - "application/xml"
        - "application/json"

      parameters:
        - in: body
          name: spot
          required: true
          description: "spot model"
          schema:
            $ref: '#/definitions/Spot'

      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdResponse"

    post:
      tags:
      - "spot"
      summary: "post new spot"
      operationId: "postSpot"
      produces:
        - "application/xml"
        - "application/json"
      consumes:
        - "application/xml"
        - "application/json"

      parameters:
        - in: body
          name: spot
          required: true
          description: "spot model"
          schema:
            $ref: '#/definitions/Spot'

      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdResponse"

  /spots/{id}:
    get:
      tags:
        - "spot"
      summary: "Find spot by identifier"
      operationId: "getSpot"
      produces:
        - "application/xml"
        - "application/json"
      consumes:
        - "application/xml"
        - "application/json"
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Spot"

  /spots/filter-ids:
    get:
      tags:
        - "spot"
      summary: "Filter spot ids"
      operationId: "filterSpotIds"
      produces:
        - "application/xml"
        - "application/json"
      consumes:
        - "application/xml"
        - "application/json"
      parameters:
        - in: body
          name: filters
          required: true
          description: "spot query filters"
          schema:
            $ref: '#/definitions/SpotFilters'
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdListResponse"

definitions:
  Spot:
    type: "object"
    properties:
      id:
        type: string
      country:
        type: "string"
        example: "PL"
      state:
        type: "string"
        example: "pomorskie"
      city:
        type: "string"
        example: "Hel"
      name:
        type: "string"
        example: "Hel Molo"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        $ref: "#/definitions/SpotStatus"
    required:
      - country
      - state
      - city
      - name

  SpotFilters:
    type: object
    properties:
      ids:
        description: "spot identifiers"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      status:
        description: "status values"
        type: "array"
        items:
          $ref: "#/definitions/SpotStatus"
        collectionFormat: "multi"
      country:
        type: "string"
        example: "PL"
      state:
        type: "string"
        example: "pomorskie"
      city:
        type: "string"
        example: "Hel"
      name:
        type: "string"
        example: "Hel Molo"

  SpotStatus:
    type: "string"
    enum:
      - "DRAFT"
      - "DECLINED"
      - "AVAILABLE"
    default: "AVAILABLE"

# RESPONSES

  PagedSpotResponse:
    type: "object"
    properties:
      spots:
        type: "array"
        items:
          $ref: "#/definitions/Spot"
      lastKey:
        type: "string"
        description: "last evaluated key received from previous dynamoDB query"
      limit:
        type: "integer"
        description: "queried page size"
      size:
        type: "integer"
        description: "items count"

  SpotIdResponse:
    type: "object"
    description: "modified spot identifier"
    properties:
      id:
        type: string

  SpotIdListResponse:
    type: "object"
    description: "spot identifiers"
    properties:
      ids:
        type: "array"
        items:
          type: string

