# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
swagger: "2.0"
info:
  title: 'spots'
  version: 0.0.2

host: thesurfadvisor.com

paths:
  /spots:
    get:
      tags:
        - "spot"
      summary: "Find spots using selectors"
      operationId: "findSpots"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:

        - in: query
          name: limit
          required: true
          default: 100
          description: "page size"
          type: integer

        - in: query
          name: lastKey
          required: false
          description: "last evaluated key received from previous dynamoDB query"
          type: string

        - in: body
          name: filters
          required: true
          description: "spot query filters"
          schema:
            $ref: '#/definitions/SpotFilters'
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/PagedSpotResponse"

    put:
      tags:
        - "spot"
      summary: "put spot"
      operationId: "putSpot"
      produces:
        - "application/json"
      consumes:
        - "application/json"

      parameters:
        - $ref: '#/parameters/latitude'
        - $ref: '#/parameters/longitude'
        - in: body
          name: spot
          required: true
          description: "spot model"
          schema:
            $ref: '#/definitions/Spot'

      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdResponse"

    post:
      tags:
        - "spot"
      summary: "post new spot"
      operationId: "postSpot"
      produces:
        - "application/json"
      consumes:
        - "application/json"

      parameters:
        - $ref: '#/parameters/latitude'
        - $ref: '#/parameters/longitude'
        - in: body
          name: spot
          required: true
          description: "spot model"
          schema:
            $ref: '#/definitions/Spot'

      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdResponse"

  /spots/{id}:
    get:
      tags:
        - "spot"
      summary: "Find spot by identifier"
      operationId: "getSpot"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Spot"

  /spots/filter-ids:
    get:
      tags:
        - "spot"
      summary: "Filter spot ids"
      operationId: "filterSpotIds"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: body
          name: filters
          required: true
          description: "spot query filters"
          schema:
            $ref: '#/definitions/SpotFilters'
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/SpotIdListResponse"

parameters:
  latitude:
    in: query
    name: latitude
    required: true
    type: number
    format: double
  longitude:
    in: query
    name: longitude
    required: true
    type: number
    format: double

definitions:
  Spot:
    type: "object"
    properties:
      id:
        type: string
      country:
        $ref: "#/definitions/CountryCode"
      state:
        type: "string"
        example: "pomorskie"
      city:
        type: "string"
        example: "Hel"
      name:
        type: "string"
        example: "Hel Molo"
      descriptions:
        type: "array"
        items:
          $ref: "#/definitions/Description"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      liveCamera:
        description: "live camera urls"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      status:
        $ref: "#/definitions/SpotStatus"
      sportTypes:
        type: "array"
        items:
          $ref: "#/definitions/SportType"
      waterType:
        $ref: "#/definitions/WaterType"
      popularity:
        $ref: "#/definitions/Popularity"
      facilities:
        type: "array"
        items:
          $ref: "#/definitions/SpotFacility"
      difficulty:
        $ref: "#/definitions/Difficulty"
      depth:
        $ref: "#/definitions/Depth"
      dangers:
        type: string
        description: free form string describing any potential risk
      bestWindDirections:
        type: "array"
        items:
          $ref: "#/definitions/BasicWindDirection"
      worstWindDirections:
        type: "array"
        items:
          $ref: "#/definitions/BasicWindDirection"
      chopSize:
        $ref: "#/definitions/ChopSize"
      waveQuality:
        type: integer
        minimum: 1
        maximum: 10
        description: overall subjective wave quality rating
      waveAvgPeriod:
        type: integer
        minimum: 1
        description: in seconds
      waveAvgSize:
        type: integer
        minimum: 0
        description: in meters
      waveMaxSize:
        type: integer
        minimum: 0
        description: in meters
      waterCurrent:
        $ref: "#/definitions/WaterCurrent"
    required:
      - country
      - state
      - city
      - name

  SpotFilters:
    type: object
    properties:
      ids:
        description: "spot identifiers"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      status:
        $ref: "#/definitions/SpotStatus"
      country:
        type: "array"
        items:
          $ref: "#/definitions/CountryCode"
        collectionFormat: "multi"
      state:
        type: "string"
        example: "pomorskie"
      city:
        type: "string"
        example: "Hel"
      name:
        type: "string"
        example: "Hel Molo"
      facilities:
        type: "array"
        items:
          $ref: "#/definitions/SpotFacility"
      difficulty:
        type: "array"
        items:
          $ref: "#/definitions/Difficulty"
      depth:
        $ref: "#/definitions/Depth"
      sportTypes:
        type: "array"
        items:
          $ref: "#/definitions/SportType"
      waterType:
        $ref: "#/definitions/WaterType"


  Description:
    type: object
    properties:
      language:
        $ref: "#/definitions/CountryCode"
      content:
        type: string

  CountryCode:
    type: string
    description: ISO 3166-1 alpha-2 code
    enum: [AD, AE, AF, AG, AI, AL, AM, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE,
           BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC,
           CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK,
           DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE,
           GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT,
           HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM,
           KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD,
           ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ,
           NA, NC, NE, NF, NG, NI, NL, "NO", NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL,
           PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH,
           SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ,
           TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE,
           VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]

  SpotStatus:
    type: "string"
    enum:
      - "DRAFT"
      - "DECLINED"
      - "AVAILABLE"

  SportType:
    type: string
    enum: [WINDSURFING, KITESURFING, SURFING]

  WaterType:
    type: string
    enum: [FLAT, WAVE]

  Popularity:
    type: string
    enum: [S, M, H]

  SpotFacility:
    type: string
    enum: [SCHOOLS]

  Difficulty:
    type: string
    enum: [EASY, MEDIUM, HARD, PROS_ONLY]

  Depth:
    type: string
    enum: [SHALLOW, DEEP]

  BasicWindDirection:
    type: string
    enum: ["N", NE, E, SE, S, SW, W, NW]

  ChopSize:
    type: string
    enum: ["N", S, M, H]

  WaterCurrent:
    type: string
    enum: ["N", S, M, H]

  # RESPONSES

  PagedSpotResponse:
    type: "object"
    properties:
      spots:
        type: "array"
        items:
          $ref: "#/definitions/Spot"
      lastKey:
        type: "string"
        description: "last evaluated key received from previous dynamoDB query"
      limit:
        type: "integer"
        description: "queried page size"
      size:
        type: "integer"
        description: "items count"

  SpotIdResponse:
    type: "object"
    description: "modified spot identifier"
    properties:
      id:
        type: string

  SpotIdListResponse:
    type: "object"
    description: "spot identifiers"
    properties:
      ids:
        type: "array"
        items:
          type: string
